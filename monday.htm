<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>League Manager</title>
  <style>
  * {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  }

  body {
    background: linear-gradient(135deg, #1a2a6c, #b21f1f, #fdbb2d);
    color: #333;
    min-height: 100vh;
    padding: 20px;
  }

  .container {
    margin: 0 auto;
    background-color: rgba(255, 255, 255, 0.95);
    border-radius: 15px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    overflow: hidden;
  }

  header {
    background: linear-gradient(to right, #2c3e50, #4a6491);
    color: white;
    padding: 25px;
    text-align: center;
  }

  h1 {
    font-size: 2.5rem;
    margin-bottom: 10px;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
  }

  .subtitle {
    font-size: 1.2rem;
    opacity: 0.9;
  }

  .content {
    display: flex;
    flex-wrap: wrap;
    padding: 20px;
    gap: 20px;
  }

  .panel {
    flex: 1;
    min-width: 300px;
    padding: 20px;
    background-color: #f8f9fa;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }

  h2 {
    color: #2c3e50;
    margin-bottom: 15px;
    padding-bottom: 10px;
    border-bottom: 2px solid #eaeaea;
  }

  .form-group {
    margin-bottom: 15px;
  }

  label {
    display: block;
    margin-bottom: 5px;
    font-weight: 600;
  }

  input {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 1rem;
  }

  button {
    background: linear-gradient(to right, #3498db, #2980b9);
    color: white;
    border: none;
    padding: 12px 20px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1rem;
    font-weight: 600;
    transition: all 0.3s ease;
    margin-top: 10px;
    width: 100%;
  }

  button:hover {
    background: linear-gradient(to right, #2980b9, #1c5a85);
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }

  button:disabled {
    background: #95a5a6;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
  }

  .player-list {
    list-style-type: none;
    margin-top: 10px;
    max-height: 200px;
    overflow-y: auto;
  }

  .player-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px;
    background-color: #e9ecef;
    margin-bottom: 5px;
    border-radius: 5px;
  }

  .remove-player {
    background: #e74c3c;
    color: white;
    border: none;
    border-radius: 50%;
    width: 24px;
    height: 24px;
    cursor: pointer;
    font-weight: bold;
    margin-left: 10px;
    line-height: 1;
    padding: 0;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    vertical-align: middle;
  }

  .matches-container {
    margin-top: 20px;
    overflow-y: auto;
    max-height: 500px;
  }

  .match {
    background-color: white;
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 15px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  }

  .match.completed {
    background-color: #d4edda;
    border-color: #c3e6cb;
  }

  .match-header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 15px;
    font-weight: bold;
    color: #2c3e50;
  }

  .game-inputs {
    display: flex;
    gap: 10px;
    align-items: flex-end; /* aligns inputs and button baseline */
  }

  .player-score {
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  .player-score input {
    height: 38px; /* same height as button */
    font-size: 1rem;
    padding: 0 10px;
    box-sizing: border-box;
  }

  .save-match {
    flex: 1;
    height: 38px; /* same height as inputs */
    font-size: 1rem;
    padding: 0;
  }

  .player-score label {
    display: block;
    margin-bottom: 5px;
    font-weight: 600;
  }

  .score-input {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 1rem;
    text-align: center;
  }

  .league-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
  }

  .league-table th {
    background-color: #2c3e50;
    color: white;
    padding: 12px;
    text-align: left;
  }

  .league-table td {
    padding: 10px;
    border-bottom: 1px solid #ddd;
  }

  .league-table tr:nth-child(even) {
    background-color: #f2f2f2;
  }

  .league-table tr:hover {
    background-color: #e9ecef;
  }

  .league-table th:nth-child(n+3),
  .league-table td:nth-child(n+3) {
    text-align: center;
  }

  .league-table th:first-child,
  .league-table td:first-child {
    text-align: center;
    width: 60px;
  }

  .league-table th:nth-child(2),
  .league-table td:nth-child(2) {
    text-align: left;
  }

  .status {
    text-align: center;
    padding: 10px;
    margin: 10px 0;
    border-radius: 5px;
    font-weight: bold;
  }

  .status.info {
    background-color: #d1ecf1;
    color: #0c5460;
  }

  .status.success {
    background-color: #d4edda;
    color: #155724;
  }

  .status.warning {
    background-color: #fff3cd;
    color: #856404;
  }

  .reset-btn {
    background: linear-gradient(to right, #e74c3c, #c0392b);
    margin-top: 5px;
  }

  .reset-btn:hover {
    background: linear-gradient(to right, #c0392b, #a53125);
  }

  @media (max-width: 768px) {
    .content {
      flex-direction: column;
    }

    .panel {
      min-width: 100%;
    }

    .game-inputs {
      flex-direction: column;
      gap: 10px;
    }
  }

  .league-leader {
    background-color: gold;
    font-weight: bold;
  }

  .league-last {
    background-color: #ff9999;
    font-weight: bold;
  }
  
  .save-history-btn {
    background: linear-gradient(to right, #27ae60, #219653);
    margin-top: 10px;
    display: none; /* Hidden by default */
  }
  
  .save-history-btn:hover {
    background: linear-gradient(to right, #219653, #1e8449);
  }
  
  .history-status {
    margin-top: 10px;
    text-align: center;
    font-weight: bold;
  }
  
  /* Style for history list */
  .history-list {
    margin-top: 15px;
    max-height: 200px;
    overflow-y: auto;
    background-color: #f9f9f9;
  }
    
  .history-item {
    padding: 8px;
    margin-bottom: 5px;
    background-color: white;
    border-radius: 3px;
    border-left: 4px solid #3498db;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .history-item:hover {
    background-color: #f0f0f0;
  }
  
  .history-item a {
    color: #2c3e50;
    text-decoration: none;
    display: block;
    flex-grow: 1;
  }
  
  .history-item a:hover {
    text-decoration: underline;
  }
    
  .history-winner {
    font-weight: bold;
    color: #27ae60;
  }
  
  .no-history {
    text-align: center;
    color: #7f8c8d;
    font-style: italic;
    padding: 10px;
  }
  
  .player-extra-stats {
    margin-top: 10px;
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 10px;
  }
  .player-extra-stats label {
    font-size: 0.85rem;
    margin-bottom: 3px;
  }
  .player-extra-stats input {
    padding: 6px;
    border: 1px solid #ccc;
    border-radius: 4px;
    width: 100%;
  }
  
  .history-actions {
    display: flex;
    gap: 5px;
  }
  
  .history-actions button {
    width: auto;
    padding: 5px 10px;
    font-size: 0.8rem;
    margin: 0;
  }
  
  .delete-btn {
    background: linear-gradient(to right, #e74c3c, #c0392b);
  }
  
  .view-mode-banner {
    background: linear-gradient(to right, #f39c12, #e67e22);
    color: white;
    padding: 10px;
    text-align: center;
    margin-bottom: 15px;
    border-radius: 5px;
    font-weight: bold;
  }
  
  .back-btn {
    background: linear-gradient(to right, #95a5a6, #7f8c8d);
    margin-top: 10px;
  }
  
  .back-btn:hover {
    background: linear-gradient(to right, #7f8c8d, #6c7b7d);
  }
  
  .current-tournament-indicator {
    background: linear-gradient(to right, #27ae60, #219653);
    color: white;
    padding: 3px 8px;
    border-radius: 12px;
    font-size: 0.7rem;
    margin-left: 8px;
  }
  </style>
</head>
<body>
  <div class="container">
    <header>
      <h1>Round Robin Tournament</h1>
      <div id="viewModeBanner" class="view-mode-banner" style="display: none;">
        Viewing Saved Tournament - <a href="?" style="color: white; text-decoration: underline;">Return to Current Tournament</a>
      </div>
    </header>

    <div class="content">
      <div class="panel">
        <h2>League Table</h2>
        <table class="league-table" id="leagueTable">
          <thead>
            <tr>
              <th>#</th>
              <th>Player</th>
              <th>P</th>
              <th>W</th>
              <th>D</th>
              <th>L</th>
              <th>LF</th>
              <th>LA</th>
              <th>100+</th>
              <th>180s</th>
              <th>CO</th>
              <th>Avg</th>
              <th>Points</th>
            </tr>
          </thead>
          <tbody id="leagueTableBody"></tbody>
        </table>
      </div>

      <div class="panel">
        <h2>Schedule</h2>
        <div class="matches-container" id="matchesContainer"></div>
      </div>
    </div>
    
    <div class="content">
      <div class="panel">
        <h2 id="setupHeader">Tournament Setup</h2>

        <div class="form-group">
          <label for="playerName">Player Name:</label>
          <input type="text" id="playerName" placeholder="Enter player name">
        </div>

        <button id="addPlayer">Add Player</button>

        <div class="status info" id="playerStatus">No players added yet. Add up to 12 players.</div>

        <h3>Players (<span id="playerCount">0</span>/12)</h3>
        <ul class="player-list" id="playerList"></ul>

        <button id="startTournament" disabled>Start Tournament</button>
        <button id="resetTournament" class="reset-btn">Reset Tournament</button>
        <button id="saveHistory" class="save-history-btn">Save Tournament to History</button>
        <div id="historyStatus" class="history-status"></div>
      </div>

      <div class="panel">
        <div id="historyListContainer">
          <h2>Saved Tournaments</h2>
          <div class="history-list" id="historyList"></div>
        </div>
      </div>
    </div>
  </div>

  <script>
  // Constants for localStorage keys
  const STORAGE_KEYS = {
    PLAYERS: 'tournament_players',
    MATCHES: 'tournament_matches',
    STARTED: 'tournament_started',
    COMPLETED: 'tournament_completed',
    SAVED_TOURNAMENTS: 'saved_tournaments'
  };

  let players = [];
  let matches = [];
  let tournamentStarted = false;
  let tournamentCompleted = false;
  let savedTournaments = [];
  let isViewMode = false;
  let currentViewTournament = null;

  const playerNameInput = document.getElementById('playerName');
  const addPlayerButton = document.getElementById('addPlayer');
  const playerList = document.getElementById('playerList');
  const playerCount = document.getElementById('playerCount');
  const startTournamentButton = document.getElementById('startTournament');
  const matchesContainer = document.getElementById('matchesContainer');
  const leagueTableBody = document.getElementById('leagueTableBody');
  const resetTournamentButton = document.getElementById('resetTournament');
  const saveHistoryButton = document.getElementById('saveHistory');
  const historyStatus = document.getElementById('historyStatus');
  const historyList = document.getElementById('historyList');
  const historyListContainer = document.getElementById('historyListContainer');
  const viewModeBanner = document.getElementById('viewModeBanner');
  const setupHeader = document.getElementById('setupHeader');

  // Initialize the app
  document.addEventListener('DOMContentLoaded', function() {
    // Check if we're in view mode (has tournament ID in URL)
    const urlParams = new URLSearchParams(window.location.search);
    const tournamentId = urlParams.get('tournament');
    
    if (tournamentId) {
      // View mode - load and display the saved tournament
      loadSavedTournaments();
      const tournament = savedTournaments.find(t => t.id == tournamentId);
      if (tournament) {
        enterViewMode(tournament);
      } else {
        alert('Tournament not found. Returning to current tournament.');
        window.location.href = '?';
      }
    } else {
      // Normal mode - load current tournament
      loadTournamentData();
    }
    
    // Always load and display saved tournaments
    loadSavedTournaments();
    displaySavedTournaments();
    
    addPlayerButton.addEventListener('click', addPlayer);
    startTournamentButton.addEventListener('click', startTournament);
    resetTournamentButton.addEventListener('click', resetTournament);
    saveHistoryButton.addEventListener('click', saveTournamentToHistory);
  });

  // Enter view mode for a saved tournament
  function enterViewMode(tournament) {
    isViewMode = true;
    currentViewTournament = tournament;
    
    // Show view mode banner
    viewModeBanner.style.display = 'block';
    viewModeBanner.innerHTML = `Viewing Saved Tournament: ${tournament.name} - <a href="?" style="color: white; text-decoration: underline;">Return to Current Tournament</a>`;
    
    // Disable all editing functionality
    playerNameInput.disabled = true;
    addPlayerButton.disabled = true;
    startTournamentButton.disabled = true;
    resetTournamentButton.disabled = true;
    saveHistoryButton.style.display = 'none';
    
    // Change setup header to indicate view mode
    setupHeader.textContent = 'Tournament Details (View Only)';
    
    // Load tournament data for viewing only
    players = JSON.parse(JSON.stringify(tournament.players));
    matches = JSON.parse(JSON.stringify(tournament.matches));
    tournamentStarted = true;
    tournamentCompleted = true;
    
    updatePlayerList();
    displayMatches();
    updateLeagueTable();
  }

  // Save tournament data to localStorage
  function saveTournamentData() {
    if (isViewMode) return; // Don't save in view mode
    
    localStorage.setItem(STORAGE_KEYS.PLAYERS, JSON.stringify(players));
    localStorage.setItem(STORAGE_KEYS.MATCHES, JSON.stringify(matches));
    localStorage.setItem(STORAGE_KEYS.STARTED, JSON.stringify(tournamentStarted));
    localStorage.setItem(STORAGE_KEYS.COMPLETED, JSON.stringify(tournamentCompleted));
  }

  // Load tournament data from localStorage
  function loadTournamentData() {
    const savedPlayers = localStorage.getItem(STORAGE_KEYS.PLAYERS);
    const savedMatches = localStorage.getItem(STORAGE_KEYS.MATCHES);
    const savedStarted = localStorage.getItem(STORAGE_KEYS.STARTED);
    const savedCompleted = localStorage.getItem(STORAGE_KEYS.COMPLETED);

    if (savedPlayers) {
      players = JSON.parse(savedPlayers);
      updatePlayerList();
      startTournamentButton.disabled = players.length < 2;
    }

    if (savedMatches) {
      matches = JSON.parse(savedMatches);
    }

    if (savedStarted) {
      tournamentStarted = JSON.parse(savedStarted);
      
      // Disable player management if tournament was already started
      if (tournamentStarted) {
        playerNameInput.disabled = true;
        addPlayerButton.disabled = true;
        startTournamentButton.disabled = true;
      }
    }

    if (savedCompleted) {
      tournamentCompleted = JSON.parse(savedCompleted);
    }

    // If tournament was started, display matches and league table
    if (tournamentStarted) {
      displayMatches();
      updateLeagueTable();
      
      // Show save button if tournament is completed
      if (tournamentCompleted) {
        saveHistoryButton.style.display = 'block';
      }
    }
  }

  function addPlayer() {
    // Prevent adding players if tournament has started
    if (tournamentStarted) {
      alert('Cannot add players after tournament has started. Reset the tournament first.');
      return;
    }
    
    const name = playerNameInput.value.trim();
    if (!name) return alert('Please enter a player name');
    if (players.length >= 12) return alert('Maximum of 12 players allowed');
    if (players.some(p => p.name === name)) return alert('Player name already exists');

    players.push({
      id: Date.now(),
      name,
      matchesPlayed: 0,
      matchesWon: 0,
      matchesDrawn: 0,
      matchesLost: 0,
      gamesWon: 0,
      gamesLost: 0,
      points: 0,
      scores100: 0,
      scores180: 0,
      highestCheckout: 0,
      average: 0
    });

    playerNameInput.value = '';
    updatePlayerList();
    startTournamentButton.disabled = players.length < 2;
    
    // Save to localStorage
    saveTournamentData();
  }

  function updatePlayerList() {
    playerList.innerHTML = '';
    playerCount.textContent = players.length;
    players.forEach(p => {
      const li = document.createElement('li');
      li.className = 'player-item';
      li.innerHTML = `${p.name} <button class="remove-player" data-id="${p.id}">×</button>`;
      playerList.appendChild(li);
      
      // Add event listener for remove button
      li.querySelector('.remove-player').addEventListener('click', function() {
        removePlayer(p.id);
      });
    });
  }

  function removePlayer(playerId) {
    if (tournamentStarted) {
      alert('Cannot remove players after tournament has started. Reset the tournament first.');
      return;
    }
    
    players = players.filter(p => p.id !== playerId);
    updatePlayerList();
    startTournamentButton.disabled = players.length < 2;
    
    // Save to localStorage
    saveTournamentData();
  }

  function startTournament() {
    if (players.length < 2) return alert('Need at least 2 players to start');
    tournamentStarted = true;
    
    // Disable player management when tournament starts
    playerNameInput.disabled = true;
    addPlayerButton.disabled = true;
    startTournamentButton.disabled = true;
    
    generateRoundRobinMatches();
    displayMatches();
    updateLeagueTable();
    
    // Save to localStorage
    saveTournamentData();
  }

  function generateRoundRobinMatches() {
    matches = [];
    const n = players.length;
    let tempPlayers = [...players];
    let dummy = null;

    if (n % 2 === 1) {
      dummy = { id: -1, name: 'BYE' };
      tempPlayers.push(dummy);
    }

    const rounds = tempPlayers.length - 1;
    const half = tempPlayers.length / 2;

    for (let round = 0; round < rounds; round++) {
      for (let i = 0; i < half; i++) {
        const p1 = tempPlayers[i];
        const p2 = tempPlayers[tempPlayers.length - 1 - i];
        if (p1.id !== -1 && p2.id !== -1) {
          matches.push({
            id: matches.length + 1,
            player1Id: p1.id,
            player2Id: p2.id,
            player1Games: null,
            player2Games: null,
            completed: false
          });
        }
      }
      tempPlayers = [tempPlayers[0]].concat([tempPlayers[tempPlayers.length - 1]].concat(tempPlayers.slice(1, tempPlayers.length - 1)));
    }
  }

  function displayMatches() {
    matchesContainer.innerHTML = '';
    matches.forEach(m => {
      const p1 = players.find(p => p.id === m.player1Id);
      const p2 = players.find(p => p.id === m.player2Id);

      const div = document.createElement('div');
      div.className = 'match' + (m.completed ? ' completed' : '');
      div.innerHTML = `
        <div class="match-header">
          <span>Match ${m.id}: ${p1.name} vs ${p2.name}</span>
          <span>${m.completed ? 'Completed' : 'Pending'}</span>
        </div>
        <div class="game-inputs">
          <div class="player-score">
            <label>${p1.name} Legs Won:</label>
            <input type="number" min="0" max="4" class="score-input" data-match="${m.id}" data-player="1" value="${m.player1Games!==null?m.player1Games:'0'}" ${m.completed || isViewMode?'disabled':''}>
            <div class="player-extra-stats">
              <div><label>100+:</label><input type="number" class="extra-input" data-match="${m.id}" data-player="1" data-field="scores100" value="${m.p1_scores100 ?? '0'}" ${m.completed || isViewMode?'disabled':''}></div>
              <div><label>180s:</label><input type="number" class="extra-input" data-match="${m.id}" data-player="1" data-field="scores180" value="${m.p1_scores180 ?? '0'}" ${m.completed || isViewMode?'disabled':''}></div>
              <div><label>Highest CO:</label><input type="number" class="extra-input" data-match="${m.id}" data-player="1" data-field="highestCheckout" value="${m.p1_highestCheckout ?? '0'}" ${m.completed || isViewMode?'disabled':''}></div>
              <div><label>Avg:</label><input type="number" step="0.01" class="extra-input" data-match="${m.id}" data-player="1" data-field="average" value="${m.p1_average ?? '0'}" ${m.completed || isViewMode?'disabled':''}></div>
            </div>
          </div>
          <div class="player-score">
            <label>${p2.name} Legs Won:</label>
            <input type="number" min="0" max="4" class="score-input" data-match="${m.id}" data-player="2" value="${m.player2Games!==null?m.player2Games:'0'}" ${m.completed || isViewMode?'disabled':''}>
            <div class="player-extra-stats">
              <div><label>100+:</label><input type="number" class="extra-input" data-match="${m.id}" data-player="2" data-field="scores100" value="${m.p2_scores100 ?? '0'}" ${m.completed || isViewMode?'disabled':''}></div>
              <div><label>180s:</label><input type="number" class="extra-input" data-match="${m.id}" data-player="2" data-field="scores180" value="${m.p2_scores180 ?? '0'}" ${m.completed || isViewMode?'disabled':''}></div>
              <div><label>Highest CO:</label><input type="number" class="extra-input" data-match="${m.id}" data-player="2" data-field="highestCheckout" value="${m.p2_highestCheckout ?? '0'}" ${m.completed || isViewMode?'disabled':''}></div>
              <div><label>Avg:</label><input type="number" step="0.01" class="extra-input" data-match="${m.id}" data-player="2" data-field="average" value="${m.p2_average ?? '0'}" ${m.completed || isViewMode?'disabled':''}></div>
            </div>
          </div>
        </div>
        ${!isViewMode ? `<button class="save-match" data-match="${m.id}" ${m.completed?'disabled':''}>${m.completed?'Completed':'Save Result'}</button>` : ''}`;

      matchesContainer.appendChild(div);
    });

    if (!isViewMode) {
      document.querySelectorAll('.save-match').forEach(btn => {
        btn.addEventListener('click', e => saveMatchResult(e.target.dataset.match));
      });
    }
    
    // Check if all matches are completed
    checkTournamentCompletion();
  }

  function saveMatchResult(matchId){
    const m = matches.find(x => x.id == matchId);
    if(!m) return;

    const p1 = players.find(p => p.id === m.player1Id);
    const p2 = players.find(p => p.id === m.player2Id);

    const g1 = parseInt(document.querySelector(`.score-input[data-match="${matchId}"][data-player="1"]`).value);
    const g2 = parseInt(document.querySelector(`.score-input[data-match="${matchId}"][data-player="2"]`).value);

    if(isNaN(g1) || isNaN(g2)) return alert('Enter valid numbers');
    if(g1 + g2 !== 4) return alert('Total legs must equal 4');

    m.player1Games = g1; m.player2Games = g2; m.completed = true;
    p1.matchesPlayed++; p2.matchesPlayed++;
    if(g1 > g2){ p1.matchesWon++; p2.matchesLost++; } 
    else if(g2 > g1){ p2.matchesWon++; p1.matchesLost++; } 
    else { p1.matchesDrawn++; p2.matchesDrawn++; }
    p1.gamesWon += g1; p1.gamesLost += g2; 
    p2.gamesWon += g2; p2.gamesLost += g1;
    p1.points += g1; p2.points += g2;

    document.querySelectorAll(`.extra-input[data-match="${matchId}"][data-player="1"]`).forEach(input => {
      const field = input.dataset.field;
      const value = parseFloat(input.value) || 0;
      if (field === "highestCheckout") {
        p1.highestCheckout = Math.max(p1.highestCheckout, value);
      } else {
        p1[field] += value;
      }
      m[`p1_${field}`] = value;
    });
    document.querySelectorAll(`.extra-input[data-match="${matchId}"][data-player="2"]`).forEach(input => {
      const field = input.dataset.field;
      const value = parseFloat(input.value) || 0;
      if (field === "highestCheckout") {
        p2.highestCheckout = Math.max(p2.highestCheckout, value);
      } else {
        p2[field] += value;
      }
      m[`p2_${field}`] = value;
    });

    displayMatches();
    updateLeagueTable();
    
    // Save to localStorage
    saveTournamentData();
  }

  function updateLeagueTable() {
    leagueTableBody.innerHTML = '';
    const sorted = [...players].sort((a,b) => b.points - a.points);
    sorted.forEach((p,i) => {
      const totalAvg = matches.filter(m => m.completed && (m.player1Id === p.id || m.player2Id === p.id))
      .reduce((sum, m) => {
        if (m.player1Id === p.id) return sum + (m.p1_average || 0);
        if (m.player2Id === p.id) return sum + (m.p2_average || 0);
        return sum;
      }, 0);

      const gamesPlayedWithAvg = matches.filter(m => m.completed && (m.player1Id === p.id && m.p1_average != null) || (m.player2Id === p.id && m.p2_average != null)).length;

      const avg = gamesPlayedWithAvg > 0 ? totalAvg / gamesPlayedWithAvg : 0;

      const tr = document.createElement('tr');
      tr.innerHTML = `
      <td>${i+1}</td>
      <td>${p.name}</td>
      <td>${p.matchesPlayed}</td>
      <td>${p.matchesWon}</td>
      <td>${p.matchesDrawn}</td>
      <td>${p.matchesLost}</td>
      <td>${p.gamesWon}</td>
      <td>${p.gamesLost}</td>
      <td>${p.scores100}</td>
      <td>${p.scores180}</td>
      <td>${p.highestCheckout}</td>
      <td>${avg.toFixed(2)}</td>
      <td>${p.points}</td>`;
      leagueTableBody.appendChild(tr);
    });
  }

  function resetTournament() {
    if (confirm('Are you sure you want to reset the tournament? All data will be lost.')) {
      players = []; 
      matches = []; 
      tournamentStarted = false; 
      tournamentCompleted = false;
      
      // Re-enable player management when tournament is reset
      playerNameInput.disabled = false; 
      addPlayerButton.disabled = false; 
      startTournamentButton.disabled = true;
      
      updatePlayerList(); 
      matchesContainer.innerHTML = ''; 
      leagueTableBody.innerHTML = '';
      saveHistoryButton.style.display = 'none';
      
      // Clear localStorage
      localStorage.removeItem(STORAGE_KEYS.PLAYERS);
      localStorage.removeItem(STORAGE_KEYS.MATCHES);
      localStorage.removeItem(STORAGE_KEYS.STARTED);
      localStorage.removeItem(STORAGE_KEYS.COMPLETED);
    }
  }

  // Check if all matches are completed
  function checkTournamentCompletion() {
    if (matches.length === 0) return;
    
    const allCompleted = matches.every(m => m.completed);
    if (allCompleted) {
      tournamentCompleted = true;
      saveHistoryButton.style.display = 'block';
      historyStatus.textContent = 'Tournament completed! You can now save it to history.';
      historyStatus.className = 'status success';
      
      // Save to localStorage
      saveTournamentData();
    }
  }

  // Save current tournament to history
  function saveTournamentToHistory() {
    if (!tournamentCompleted) {
      alert('Tournament must be completed before saving to history.');
      return;
    }
    
    const tournamentId = Date.now();
    const tournamentName = `Tournament ${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}`;
    
    const tournamentData = {
      id: tournamentId,
      name: tournamentName,
      date: new Date().toISOString(),
      players: JSON.parse(JSON.stringify(players)),
      matches: JSON.parse(JSON.stringify(matches)),
      winner: getTournamentWinner()
    };
    
    savedTournaments.push(tournamentData);
    saveSavedTournaments();
    displaySavedTournaments();
    
    historyStatus.textContent = `Tournament saved successfully! ID: ${tournamentId}`;
    historyStatus.className = 'status success';
  }

  // Get the tournament winner
  function getTournamentWinner() {
    if (players.length === 0) return null;
    
    const sorted = [...players].sort((a,b) => b.points - a.points);
    return sorted[0].name;
  }

  // Load saved tournaments from localStorage
  function loadSavedTournaments() {
    const saved = localStorage.getItem(STORAGE_KEYS.SAVED_TOURNAMENTS);
    if (saved) {
      savedTournaments = JSON.parse(saved);
      // Sort tournaments by date (most recent first)
      savedTournaments.sort((a, b) => new Date(b.date) - new Date(a.date));
    }
  }

  // Save tournaments to localStorage
  function saveSavedTournaments() {
    // Sort tournaments by date before saving
    savedTournaments.sort((a, b) => new Date(b.date) - new Date(a.date));
    localStorage.setItem(STORAGE_KEYS.SAVED_TOURNAMENTS, JSON.stringify(savedTournaments));
  }

  // Display saved tournaments
  function displaySavedTournaments() {
    historyList.innerHTML = '';
    
    if (savedTournaments.length === 0) {
      historyList.innerHTML = '<div class="no-history">No saved tournaments yet.</div>';
      return;
    }
    
    savedTournaments.forEach(tournament => {
      const item = document.createElement('div');
      item.className = 'history-item';
      
      const isCurrentTournament = !isViewMode && tournamentStarted && 
        tournament.players && players && 
        JSON.stringify(tournament.players) === JSON.stringify(players);
      
      item.innerHTML = `
        <a href="?tournament=${tournament.id}">
          <strong>${tournament.name}</strong>
          ${isCurrentTournament ? '<span class="current-tournament-indicator">Current</span>' : ''}
          <br>
          <small>${new Date(tournament.date).toLocaleDateString()} ${new Date(tournament.date).toLocaleTimeString()} - Winner: <span class="history-winner">${tournament.winner}</span></small>
        </a>
        <div class="history-actions">
          <button class="delete-btn" data-id="${tournament.id}">Delete</button>
        </div>
      `;
      historyList.appendChild(item);
    });
    
    // Add event listeners to delete buttons
    document.querySelectorAll('.delete-btn').forEach(btn => {
      btn.addEventListener('click', e => {
        const id = parseInt(e.target.dataset.id);
        deleteTournamentFromHistory(id);
      });
    });
  }

  // Delete a tournament from history
  function deleteTournamentFromHistory(id) {
    if (!confirm('Are you sure you want to delete this tournament from history?')) {
      return;
    }
    
    savedTournaments = savedTournaments.filter(t => t.id !== id);
    saveSavedTournaments();
    displaySavedTournaments();
    
    historyStatus.textContent = 'Tournament deleted from history.';
    historyStatus.className = 'status info';
  }
  </script>
</body>
</html>