<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Bunting Mental - Doubles Practice</title>
<link href="board.css" rel="stylesheet">
</head>
<body>

<h1>Bunting Mental - Doubles Practice</h1>

<div class="container">
  <div class="panel">
    <ul class="stats-list" id="results"></ul>
    <div class="totals" id="totals">Total hits: 0</div>
    <br>
    <div style="display: flex; justify-content: space-between;">
      <button class="btn btn-primary" id="exportStats">Export Todays Stats</button>
    </div>
  </div>

  <div class="panel board-container">
    <svg viewBox="-225 -225 450 450" id="dartboard"></svg>
  </div>

  <div class="panel">
    <div class="current-double" id="currentDoubleDisplay">
      <div class="current-double-text" id="currentDoubleText">-</div>
    </div>
    
    <h3>Enter Hits</h3>
    <div class="input-group">
      <input type="number" id="hits" min="0" max="15" placeholder="0-15">
      <button class="btn btn-primary" id="submit">Submit Round</button>
    </div>
  </div>
</div>

<script>
class DartboardApp {
  constructor() {
    this.NUMBERS = [20,1,18,4,13,6,10,15,2,17,3,19,7,16,8,11,14,9,12,5];
    this.ALL_DOUBLES = [...Array(20).keys()].map(i => i + 1).concat(25);
    this.STORAGE_KEYS = { remaining: 'remainingDoubles', current: 'currentDouble', currentSession: 'currentSession', sessions: 'doublesSessionsV2' };

    this.DIMS = { outerRadius: 200, doubleWidth: 20, trebleRadius: 120, trebleWidth: 20, bullOuter: 16, bullInner: 8 };

    this.remaining = this.loadData(this.STORAGE_KEYS.remaining) || [...this.ALL_DOUBLES];
    this.currentDouble = this.loadData(this.STORAGE_KEYS.current);

    this.sessionData = this.loadData(this.STORAGE_KEYS.currentSession) || this.createNewSession();

    this.totalHits = 0;
    this.totalAttempts = 0;

    this.elements = {
      svg: document.getElementById('dartboard'),
      hits: document.getElementById('hits'),
      submit: document.getElementById('submit'),
      results: document.getElementById('results'),
      totals: document.getElementById('totals'),
      export: document.getElementById('exportStats'),
      currentDoubleText: document.getElementById('currentDoubleText'),
      currentDoubleDisplay: document.getElementById('currentDoubleDisplay')
    };

    this.init();
  }

  createNewSession() {
    return {
      sessionId: `session_${Date.now()}`,
      date: new Date().toISOString(),
      doubles: {},
      totalHits: 0,
      timestamp: Date.now()
    };
  }

  loadData(key) {
    try { const data = localStorage.getItem(key); return data ? JSON.parse(data) : null; } catch { return null; }
  }
  saveData(key, data) {
    try { if (data===null) localStorage.removeItem(key); else localStorage.setItem(key,JSON.stringify(data)); } catch(e){console.warn(e);}
  }

  init() {
    this.bindEvents();
    this.drawBoard();
    this.renderStats();
    this.setupCurrentDouble();
    this.elements.hits.focus();
  }

  bindEvents() {
    this.elements.hits.addEventListener('keydown', e => { if(e.key==='Enter'){this.submitRound(); e.preventDefault();} });
    this.elements.hits.addEventListener('focus', ()=>this.elements.hits.select());
    this.elements.hits.addEventListener('blur', ()=>setTimeout(()=>this.elements.hits.focus(),0));
    this.elements.submit.addEventListener('click', ()=>this.submitRound());
    this.elements.export.addEventListener('click', ()=>this.exportStats());
  }

  getDoubleColor(dbl){ return dbl===25?'red':(this.NUMBERS.indexOf(dbl)%2===0?'red':'green'); }
  updateCurrentDoubleDisplay(){
    if(this.currentDouble!==null){
      this.elements.currentDoubleText.textContent=`D${this.currentDouble}`;
      this.elements.currentDoubleDisplay.classList.remove('green');
      if(this.getDoubleColor(this.currentDouble)==='green') this.elements.currentDoubleDisplay.classList.add('green');
    } else { this.elements.currentDoubleText.textContent='-'; this.elements.currentDoubleDisplay.classList.remove('green'); }
  }

  polarToCartesian(cx,cy,r,angleDeg){
    const a=(angleDeg-90)*Math.PI/180; return {x:cx+r*Math.cos(a),y:cy+r*Math.sin(a)};
  }
  createArcPath(cx,cy,rInner,rOuter,startAngle,endAngle){
    const so=this.polarToCartesian(cx,cy,rOuter,endAngle), eo=this.polarToCartesian(cx,cy,rOuter,startAngle);
    const si=this.polarToCartesian(cx,cy,rInner,startAngle), ei=this.polarToCartesian(cx,cy,rInner,endAngle);
    const la=endAngle-startAngle<=180?0:1;
    return ['M',so.x,so.y,'A',rOuter,rOuter,0,la,0,eo.x,eo.y,'L',si.x,si.y,'A',rInner,rInner,0,la,1,ei.x,ei.y,'Z'].join(' ');
  }
  createElement(type,attrs={}){ const el=document.createElementNS('http://www.w3.org/2000/svg',type); Object.entries(attrs).forEach(([k,v])=>el.setAttribute(k,v)); return el; }

  drawBoard(){
    const svg=this.elements.svg, {NUMBERS,DIMS}=this, {outerRadius,doubleWidth,trebleRadius,trebleWidth,bullOuter,bullInner}=DIMS;
    svg.innerHTML='';
    for(let i=0;i<20;i++){
      const startAngle=-9+i*18,endAngle=-9+(i+1)*18,isEven=i%2===0;
      const singleColor=isEven?'#000':'#fff',specialColor=isEven?'#dc3545':'#28a745';
      svg.appendChild(this.createElement('path',{d:this.createArcPath(0,0,outerRadius-doubleWidth,outerRadius,startAngle,endAngle),fill:specialColor,id:`double${NUMBERS[i]}`,class:'segment'}));
      svg.appendChild(this.createElement('path',{d:this.createArcPath(0,0,trebleRadius-trebleWidth,trebleRadius,startAngle,endAngle),fill:specialColor,class:'segment'}));
      svg.appendChild(this.createElement('path',{d:this.createArcPath(0,0,trebleRadius,outerRadius-doubleWidth,startAngle,endAngle),fill:singleColor,class:'segment'}));
      svg.appendChild(this.createElement('path',{d:this.createArcPath(0,0,bullOuter,trebleRadius-trebleWidth,startAngle,endAngle),fill:singleColor,class:'segment'}));
      const angleMid=(startAngle+endAngle)/2,pos=this.polarToCartesian(0,0,outerRadius+15,angleMid), numberText=this.createElement('text',{x:pos.x,y:pos.y,class:'number'});
      numberText.textContent=NUMBERS[i]; svg.appendChild(numberText);
    }
    svg.appendChild(this.createElement('circle',{r:bullOuter,fill:'#28a745'}));
    svg.appendChild(this.createElement('circle',{r:bullInner,fill:'#dc3545',id:'double25'}));
  }

  setupCurrentDouble(){
    if(this.currentDouble!==null){ this.highlightDouble(this.currentDouble); this.updateCurrentDoubleDisplay(); }
    else this.pickRandomDouble();
  }

  pickRandomDouble(){
    if(this.remaining.length===0){ this.handleRoundComplete(); return; }
    const idx=Math.floor(Math.random()*this.remaining.length);
    this.currentDouble=this.remaining.splice(idx,1)[0];
    this.saveData(this.STORAGE_KEYS.remaining,this.remaining);
    this.saveData(this.STORAGE_KEYS.current,this.currentDouble);
    this.clearHighlights();
    this.highlightDouble(this.currentDouble);
    this.updateCurrentDoubleDisplay();
    this.elements.hits.focus();
  }

  handleRoundComplete(){
    this.elements.submit.disabled=true; this.elements.hits.disabled=true;
    this.clearHighlights(); this.elements.currentDoubleText.textContent='-'; this.elements.currentDoubleDisplay.classList.remove('green');
    // save completed session in doublesSessions
    let sessions=this.loadData(this.STORAGE_KEYS.sessions)||[];
    sessions.push(this.sessionData);
    this.saveData(this.STORAGE_KEYS.sessions,sessions);
    // remove currentSession
    this.saveData(this.STORAGE_KEYS.currentSession,null);
    setTimeout(()=>{ alert('All doubles completed!'); this.resetRound(); },0);
  }

  resetRound(){
    this.remaining=[...this.ALL_DOUBLES]; this.currentDouble=null;
    this.saveData(this.STORAGE_KEYS.remaining,this.remaining);
    this.saveData(this.STORAGE_KEYS.current,null);
    this.sessionData=this.createNewSession();
    this.saveData(this.STORAGE_KEYS.currentSession,this.sessionData);
    this.elements.submit.disabled=false; this.elements.hits.disabled=false;
    this.pickRandomDouble();
    this.renderStats();
  }

  highlightDouble(dbl){ const el=document.getElementById(`double${dbl}`); if(el) el.setAttribute('fill','#ffd700'); }
  clearHighlights(){ this.ALL_DOUBLES.forEach(dbl=>{ const el=document.getElementById(`double${dbl}`); if(el){ if(dbl===25) el.setAttribute('fill','#dc3545'); else el.setAttribute('fill',this.NUMBERS.indexOf(dbl)%2===0?'#dc3545':'#28a745'); } }); }

  submitRound(){
    if(this.currentDouble===null) return;
    const hits=parseInt(this.elements.hits.value,10);
    if(isNaN(hits)||hits<0||hits>15){ alert('Enter valid hits (0-15)'); return; }
    this.sessionData.doubles[this.currentDouble]=hits;
    this.sessionData.totalHits+=hits;
    this.saveData(this.STORAGE_KEYS.currentSession,this.sessionData);
    this.renderStats();
    this.pickRandomDouble();
    this.elements.hits.select();
  }

  renderStats(){
    // Aggregate today's sessions (completed + current)
    const allSessions = this.loadData(this.STORAGE_KEYS.sessions)||[];
    const today = new Date().toISOString().split('T')[0];
    const todaysSessions = allSessions.filter(s => s.date.startsWith(today));
    if(this.sessionData.date.startsWith(today)) todaysSessions.push(this.sessionData);

    // Aggregate hits per double
    const stats={}; this.ALL_DOUBLES.forEach(d=>stats[d]={attempts:0,totalHits:0});
    todaysSessions.forEach(sess => {
      Object.entries(sess.doubles).forEach(([dbl,hits])=>{
        dbl=parseInt(dbl,10);
        stats[dbl].attempts++;
        stats[dbl].totalHits+=hits;
      });
    });

    const fragment=document.createDocumentFragment();
    this.totalHits=0; this.totalAttempts=0;
    this.ALL_DOUBLES.forEach(dbl=>{
      const data=stats[dbl], li=document.createElement('li'); li.className='stats-item';
      const colorClass=dbl===25?'badge-red':(this.NUMBERS.indexOf(dbl)%2===0?'badge-red':'badge-green');
      const badge=document.createElement('span'); badge.className=`badge ${colorClass}`; badge.textContent=`D${dbl}`; li.appendChild(badge);
      const text=document.createElement('span');
      if(data.attempts>0){ this.totalHits+=data.totalHits; this.totalAttempts+=data.attempts; text.textContent=`${data.totalHits} hits in ${data.attempts} rounds`; }
      else { text.textContent='No data yet'; text.style.color='#999'; }
      li.appendChild(text); fragment.appendChild(li);
    });

    this.elements.results.innerHTML=''; this.elements.results.appendChild(fragment);
    this.elements.totals.textContent=`Total hits: ${this.totalHits} (${this.totalAttempts} rounds)`;
  }

  exportStats(){
    const sessions=this.loadData(this.STORAGE_KEYS.sessions)||[];
    let exportText='Doubles Practice Statistics\n============================\n\n';
    sessions.forEach(sess=>{
      exportText+=`Session: ${sess.sessionId} (${sess.date})\n`;
      this.ALL_DOUBLES.forEach(dbl=>{
        const hits=sess.doubles[dbl]||0;
        exportText+=`D${dbl}: ${hits} hits\n`;
      });
      exportText+=`Total hits: ${sess.totalHits}\n\n`;
    });
    const blob=new Blob([exportText],{type:'text/plain'});
    const url=URL.createObjectURL(blob); const a=document.createElement('a'); a.href=url;
    a.download=`doubles-practice-stats-${new Date().toISOString().slice(0,10)}.txt`;
    document.body.appendChild(a); a.click(); document.body.removeChild(a); URL.revokeObjectURL(url);
  }
}

new DartboardApp();
</script>

</body>
</html>
